// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: hello.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";

export const protobufPackage = "hello";

export interface TestUnaryRequest {
  messageTest30100: string;
  messageTest: string;
}

export interface TestUnaryResponse {
  messageTest30100: string;
  messageTest: string;
}

export const HELLO_PACKAGE_NAME = "hello";

function createBaseTestUnaryRequest(): TestUnaryRequest {
  return { messageTest30100: "", messageTest: "" };
}

export const TestUnaryRequest = {
  encode(message: TestUnaryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.messageTest30100 !== "") {
      writer.uint32(10).string(message.messageTest30100);
    }
    if (message.messageTest !== "") {
      writer.uint32(18).string(message.messageTest);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TestUnaryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestUnaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageTest30100 = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.messageTest = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseTestUnaryResponse(): TestUnaryResponse {
  return { messageTest30100: "", messageTest: "" };
}

export const TestUnaryResponse = {
  encode(message: TestUnaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.messageTest30100 !== "") {
      writer.uint32(10).string(message.messageTest30100);
    }
    if (message.messageTest !== "") {
      writer.uint32(18).string(message.messageTest);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TestUnaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestUnaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageTest30100 = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.messageTest = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

export interface HelloServiceClient {
  testUnary(request: TestUnaryRequest, metadata?: Metadata): Observable<TestUnaryResponse>;
}

export interface HelloServiceController {
  testUnary(
    request: TestUnaryRequest,
    metadata?: Metadata,
  ): Promise<TestUnaryResponse> | Observable<TestUnaryResponse> | TestUnaryResponse;
}

export function HelloServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["testUnary"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HelloService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HelloService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HELLO_SERVICE_NAME = "HelloService";

export type HelloServiceService = typeof HelloServiceService;
export const HelloServiceService = {
  testUnary: {
    path: "/hello.HelloService/TestUnary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestUnaryRequest) => Buffer.from(TestUnaryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestUnaryRequest.decode(value),
    responseSerialize: (value: TestUnaryResponse) => Buffer.from(TestUnaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestUnaryResponse.decode(value),
  },
} as const;

export interface HelloServiceServer extends UntypedServiceImplementation {
  testUnary: handleUnaryCall<TestUnaryRequest, TestUnaryResponse>;
}

export interface HelloServiceClient extends Client {
  testUnary(
    request: TestUnaryRequest,
    callback: (error: ServiceError | null, response: TestUnaryResponse) => void,
  ): ClientUnaryCall;
  testUnary(
    request: TestUnaryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestUnaryResponse) => void,
  ): ClientUnaryCall;
  testUnary(
    request: TestUnaryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestUnaryResponse) => void,
  ): ClientUnaryCall;
}

export const HelloServiceClient = makeGenericClientConstructor(
  HelloServiceService,
  "hello.HelloService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HelloServiceClient;
  service: typeof HelloServiceService;
  serviceName: string;
};
